--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/AuthSystem/models.py ---
from django.db import models

# Create your models here.


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/AuthSystem/apps.py ---
from django.apps import AppConfig


class AuthsystemConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'AuthSystem'


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/AuthSystem/forms.py ---
from django.contrib.auth import get_user_model
from django.contrib.auth.forms import UserCreationForm
from django import forms

from AdminPannel.models import Role


class RegisterUserForm(UserCreationForm):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields["username"].widget.attrs.update({
            'type': "text",
            'placeholder': "username...",
            'id': "userName",
            'name': "username",
            'class': "form-control form-control-lg mb-2 add"
        })
        self.fields["email"].widget.attrs.update({
            'type': "email",
            'placeholder': "email...",
            'id': "email",
            'name': "email",
            'class': "form-control form-control-lg mb-2 add"
        })
        self.fields["password1"].widget.attrs.update({
            'type': "password",
            'placeholder': "password1...",
            'id': "password1",
            'name': "password1",
            'class': "form-control form-control-lg mb-2 add"
        })
        self.fields["password2"].widget.attrs.update({
            'type': "password",
            'placeholder': "password2...",
            'id': "password2",
            'name': "password2",
            'class': "form-control form-control-lg mb-2 add"
        })

    class Meta:
        model = get_user_model()
        fields = ['username', 'email', 'password1', 'password2']

    def save(self, commit=True):
        user = super().save(commit=False)
        user.role = Role.objects.get(role_name="Покупатель")
        if commit:
            user.save()
        return user



# class UserUpdateForm(forms.ModelForm):
#     class Meta:
#         model = get_user_model()
#         fields = ['username', 'first_name', 'last_name', 'email']
#
#     def __init__(self, *args, **kwargs):
#         super().__init__(*args, **kwargs)
#         self.fields["username"].widget.attrs.update({
#             'type': "text",
#             'placeholder': "username...",
#             'id': "userName",
#             'name': "username",
#             'class': "form-control form-control-lg mb-2 add size"
#         })
#         self.fields["email"].widget.attrs.update({
#             'type': "email",
#             'placeholder': "email...",
#             'id': "email",
#             'name': "email",
#             'class': "form-control form-control-lg mb-2 add size"
#         })
#         self.fields["first_name"].widget.attrs.update({
#             'placeholder': "first name...",
#             'class': "form-control form-control-lg mb-2 add size"
#         })
#         self.fields["last_name"].widget.attrs.update({
#             'placeholder': "second name...",
#             'class': "form-control form-control-lg mb-2 add size"
#         })

from django import forms
from django.contrib.auth.forms import PasswordChangeForm
from django.contrib.auth import get_user_model

class UserUpdateForm(forms.ModelForm):
    patronymic = forms.CharField(max_length=30, required=False, widget=forms.TextInput(attrs={
        'placeholder': "отчество...",
        'class': "form-control form-control-lg mb-2 add size"
    }))
    profile_picture = forms.ImageField(required=False)

    class Meta:
        model = get_user_model()
        fields = ['username', 'first_name', 'last_name', 'email', 'patronymic', 'profile_picture']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields["username"].widget.attrs.update({
            'type': "text",
            'placeholder': "username...",
            'class': "form-control form-control-lg mb-2 add size"
        })
        self.fields["email"].widget.attrs.update({
            'type': "email",
            'placeholder': "email...",
            'class': "form-control form-control-lg mb-2 add size"
        })
        self.fields["first_name"].widget.attrs.update({
            'placeholder': "first name...",
            'class': "form-control form-control-lg mb-2 add size"
        })
        self.fields["last_name"].widget.attrs.update({
            'placeholder': "last name...",
            'class': "form-control form-control-lg mb-2 add size"
        })

class PasswordChangeFormCustom(PasswordChangeForm):
    old_password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control'}))
    new_password1 = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control'}))
    new_password2 = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control'}))


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/AuthSystem/admin.py ---
from django.contrib import admin

# Register your models here.


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/AuthSystem/routing.py ---
from django.urls import path, include

from .views import *
urlpatterns = [

    path('accounts/', include('django.contrib.auth.urls')),
    path('logout/', logout_user, name='logout'),
    path('accounts/login/', AccountLoginView.as_view(),
         name='logining'),
    path('signup/', SignUp.as_view(), name='signup'),
    path('<int:pk>/update/', UserUpdateView.as_view(), name='update_user'),

]

--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/AuthSystem/tests.py ---
from django.test import TestCase

# Create your tests here.


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/AuthSystem/views.py ---
from django.contrib.auth import logout
from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.auth.views import LoginView
from django.shortcuts import render, redirect
from django.urls import reverse_lazy, reverse
from django.views.generic import CreateView, UpdateView

from AdminPannel.models import User, Role
from AuthSystem.forms import RegisterUserForm, UserUpdateForm


# Create your views here.
def home(request):
    context = {}
    return render(request, 'system_settings_page.html', context = context)


class SignUp(CreateView):
    form_class = RegisterUserForm
    success_url = reverse_lazy("login")
    template_name = "registration/registration.html"


def logout_user(request):
    logout(request)
    return redirect('logining')




class AccountLoginView(LoginView):
    template_name = 'registration/login.html'

    def get_success_url(self):
        user = self.request.user
        if user.is_authenticated:
            if user.role:  # Проверяем, есть ли роль
                if user.role.role_name == 'Менеджер':  # Проверяем название роли
                    return reverse('home')
                elif user.role.role_name == 'Администратор':
                    return reverse('user_list')
        return super().get_success_url()
#
# class AccountLoginView(LoginView):
#     template_name = 'registration/login.html'
#
#     def get_success_url(self):
#         user = self.request.user
#         if user.role and user.role.role_name == "Менеджер":
#             return reverse_lazy('home')
#         elif user.role and user.role.role_name == "Администратор":
#             return reverse_lazy('user_list')
#         return super().get_success_url()  # В случае, если роль не определена

@login_required
def profile_view(request):
    return render(request, 'registration/profile.html')

class UserUpdateView(LoginRequiredMixin, UpdateView):
    model = User
    form_class = UserUpdateForm
    template_name = 'registration/profile.html'
    success_url = reverse_lazy('user_list')

    def get_object(self, queryset=None):
        return self.request.user


