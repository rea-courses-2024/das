
--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/templates/base.html ---
<!DOCTYPE html>
{% load static %}
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .header {
            background-color: #212529; /* Цвет фона */
            color: white; /* Цвет текста */
            padding: 15px; /* Отступы */
        }

        .header .logo {
            font-size: 24px; /* Размер шрифта для логотипа */
        }

        .header .nav-link {
            color: white; /* Цвет ссылок */
        }
    </style>
    <title></title>
    {% block style %}
    {% endblock %}
</head>
<body>
{% block header %}
    {% include 'inc/_header.html' %}
{% endblock %}

{% block content %}
{% endblock %}

{% block modal %}
    {% include "inc/_modal.html" %}
{% endblock %}

<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/templates/user_created.html ---
<!-- user_created.html -->
{% extends 'base.html' %}

{% block content %}
    <div class="container mt-5">
        <h1>Пользователь создан успешно!</h1>
{% comment %}        <p><strong>Имя:</strong> {{ user.first_name }}</p>
        <p><strong>Фамилия:</strong> {{ user.last_name }}</p>{% endcomment %}
        <p><strong>Логин:</strong> {{ username }}</p>
        <p><strong>Пароль:</strong> {{ password }}</p>
        <p><strong>Email:</strong> {{ email }}</p>
        <a href="{% url 'create_user' %}" class="btn btn-primary">Создать еще одного пользователя</a>
    </div>
{% endblock %}


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/templates/create_user.html ---
{% extends 'base.html' %}

{% block content %}
    <div class="container mt-5">
        <h1>Создание нового пользователя</h1>
        <form method="POST">
            {% csrf_token %}
            <div class="form-group">
                <label for="first_name">Имя:</label>
                <input type="text" class="form-control" id="first_name" name="first_name" required>
            </div>
            <div class="form-group">
                <label for="last_name">Фамилия:</label>
                <input type="text" class="form-control" id="last_name" name="last_name" required>
            </div>
            <div class="form-group">
                <label for="email">Email:</label>
                <input type="email" class="form-control" id="email" name="email" required>
            </div>
            <div class="form-group">
                <label for="role">Роль:</label>
                <select class="form-control" id="role" name="role" required>
                    {% for role in roles %}
                        <option value="{{ role.id }}">{{ role.role_name }}</option>
                    {% endfor %}
                </select>
            </div>
            <button type="submit" class="btn btn-primary">Создать пользователя</button>
        </form>
    </div>
    
{% endblock %}


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/templates/system_settings_page.html ---
{% extends 'base.html' %}
{% block content %}
    
{% endblock %}

--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/templates/logs.html ---
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Просмотр логов</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center">Просмотр логов</h1>
        
    </div>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.0.7/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>

--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/templates/user_list.html ---
{% extends 'base.html' %}
{% block content %}
    <div class="container mt-5">
        <h1>Список пользователей</h1>

        <form method="GET" class="mb-3">
            <input type="text" name="q" placeholder="Поиск..." class="form-control" value="{{ request.GET.q }}">
            <button type="submit" class="btn btn-primary mt-2">Поиск</button>
        </form>

        <div class="mb-3">
            {% for role in roles %}
                <a href="?role={{ role }}" class="btn btn-secondary mr-2">{{ role }}</a>
            {% endfor %}
            <a href="?" class="btn btn-secondary">Сбросить фильтр</a>
        </div>
        <a href="{% url 'create_user' %}" class="btn btn-secondary mt-2 mb-2">Добавить нового пользователя</a>

        <table class="table table-bordered">
            <thead>
            <tr>
                <th>Юзернейм</th>
                <th>Имя</th>
                <th>Фамилия</th>
                <th>Роль</th>
                <th>Действия</th>
            </tr>
            </thead>
            <tbody>
            {% for user in users %}
                <tr {% if not user.is_active %}style="color: red;"{% endif %}>
                    <td>{{ user.username }}</td>
                    <td>{{ user.first_name }}</td>
                    <td>{{ user.last_name }}</td>
                    <td>{{ user.role }}</td>
                    <td>
                        <button class="btn btn-info" data-toggle="modal" data-target="#userModal"
                                data-username="{{ user.username }}" data-role="{{ user.role.role_name }}"
                                data-user-id="{{ user.id }}">Изменить роль
                        </button>
                        <a href="{% url 'block_user' user.id %}" class="btn btn-warning">Заблокировать</a>
                        <a href="{% url 'unblock_user' user.id %}" class="btn btn-success">Разблокировать</a>
                    </td>
                </tr>
            {% endfor %}
            </tbody>
        </table>

        <div class="modal fade" id="userModal" tabindex="-1" aria-labelledby="userModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="userModalLabel">Изменение роли пользователя</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span>&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p><strong>Юзернейм:</strong> <span id="modal-username"></span></p>
                        <p><strong>Текущая роль:</strong> <span id="modal-role"></span></p>

                        <form id="roleChangeForm" method="POST" action="{% url 'change_user_role' %}">
                            {% csrf_token %}
                            <input type="hidden" id="modal-user-id" name="user_id">
                            <div class="form-group">
                                <label for="roleSelect">Выберите новую роль:</label>
                                <select class="form-control" id="roleSelect" name="role">
                                    {% for role in roles %}
                                        <option value="{{ role.id }}">{{ role.role_name }}</option>
                                    {% endfor %}
                                </select>
                            </div>
                            <button type="submit" class="btn btn-primary">Сменить роль</button>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Закрыть</button>
                    </div>
                </div>
            </div>
        </div>

    </div>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
    <script>
        $('#userModal').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget);
            var username = button.data('username');
            var role = button.data('role');
            var userId = button.data('user-id');

            var modal = $(this);
            modal.find('#modal-username').text(username);
            modal.find('#modal-role').text(role);
            modal.find('#modal-user-id').val(userId);
        });
    </script>
{% endblock %}


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/templates/registration/profile.html ---
{% extends 'base.html' %}
{% load static %}

{% block content %}
    <div class="">
        <div class="container rounded mt-5 mb-5">
            <div class="row">
                <form method="post" enctype="multipart/form-data" class="row">
                    {% csrf_token %}
                    <div class="col-md-4 border-right d-flex align-items-center justify-content-center">
                        <div class="d-flex flex-column align-items-center justify-content-center text-center p-3 py-5">
                            <div class="user_img">
                                <img src="{{ user.profile_picture.url }}" alt="Profile Picture" width="250" height="250">
                            </div>
                            <span class="text-black-50 mt-3">{{ user.first_name }} {{ user.last_name }}</span>
                            <span class="text-black-50">{{ user.email }}</span>
                        </div>
                    </div>
                    <div class="col">
                        <div class="p-3 py-5">
                            <div class="d-flex justify-content-center align-items-center mb-3">
                                <h4 class="text_font">настройки профиля</h4>
                            </div>
                            <div class="row mt-5">
                                <div class="col-md-6"><label class="labels">имя</label>{{ form.first_name }}</div>
                                <div class="col-md-6"><label class="labels">фамилия</label>{{ form.last_name }}</div>
                            </div>
                            <div class="row mt-3">
                                <div class="col-md-12"><label class="labels">отчество</label>{{ form.patronymic }}</div>
                                <div class="col-md-12"><label class="labels">Email</label>{{ form.email }}</div>
                                <div class="col-md-12"><label class="labels">Никнейм</label>{{ form.username }}</div>
                                <div class="col-md-12"><label class="labels">Фото профиля</label>{{ form.profile_picture }}</div>
                            </div>
                            <div class="mt-5 text-center">
                                <button class="btn btn-success" type="submit">Сохранить</button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

{% endblock %}


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/templates/registration/login.html ---
<link href="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">
<script src="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<!------ Include the above in your HEAD tag ---------->
<style>
    body {
  margin: 0;
  padding: 0;
  background-color: #17a2b8;
  height: 100vh;
}
#login .container #login-row #login-column #login-box {
  margin-top: 120px;
  max-width: 600px;
  height: 320px;
  border: 1px solid #9C9C9C;
  background-color: #EAEAEA;
}
#login .container #login-row #login-column #login-box #login-form {
  padding: 20px;
}
#login .container #login-row #login-column #login-box #login-form #register-link {
  margin-top: -85px;
}
</style>
<body>

    <div id="login">
        <h3 class="text-center text-white pt-5">Login form</h3>
        <div class="container">
            <div id="login-row" class="row justify-content-center align-items-center">
                <div id="login-column" class="col-md-6">
                    <div id="login-box" class="col-md-12">
                        <form id="login-form" class="form" action="" method="post">
                              {% csrf_token %}
                            <h3 class="text-center text-info">Login</h3>
                            <div class="form-group">
                                <label for="username" class="text-info">Username:</label><br>
{#                                <input type="text" name="username" id="username" class="form-control">#}
                                {{ form.username }}
                            </div>
                            <div class="form-group">
                                <label for="password" class="text-info">Password:</label><br>
{#                                <input type="text" name="password" id="password" class="form-control">#}
                                      {{ form.password }}
                            </div>
                            <div class="form-group">
                                <input type="submit" name="submit" class="btn btn-info btn-md" value="submit">
                            </div>
                            <div id="register-link" class="text-right">
                                <a href="{% url 'signup' %}" class="text-info">зарегистрироваться</a>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/templates/registration/registration.html ---
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">
    <title>Регистрация</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background-color: #17a2b8;
            height: 100vh;
        }
        #registration .container #registration-row #registration-column #registration-box {
            margin-top: 120px;
            max-width: 600px;
            border: 1px solid #9C9C9C;
            background-color: #EAEAEA;
        }
        #registration .container #registration-row #registration-column #registration-box #registration-form {
            padding: 20px;
        }
    </style>
</head>
<body>
    <div id="registration">
        <h2 class="text-center text-white pt-5">Регистрация</h2>
        <div class="container">
            <div id="registration-row" class="row justify-content-center align-items-center">
                <div id="registration-column" class="col-md-6">
                    <div id="registration-box" class="col-md-12">
                        <form id="registration-form" class="form" method="post" novalidate>
                            {% csrf_token %}
                            {{ form.non_field_errors }}
                            <div class="form-group">
                                {{ form.username.label }}
                                {{ form.username }}
                                {{ form.username.errors }}
                            </div>
                            <div class="form-group">
                                {{ form.email.label }}
                                {{ form.email }}
                                {{ form.email.errors }}
                            </div>
                            <div class="form-group">
                                {{ form.password1.label }}
                                {{ form.password1 }}
                                {{ form.password1.errors }}
                            </div>
                            <div class="form-group">
                                {{ form.password2.label }}
                                {{ form.password2 }}
                                {{ form.password2.errors }}
                            </div>
                            <button type="submit" class="btn btn-info btn-lg btn-block">Зарегистрироваться</button>
                        </form>
                        <p class="text-center mt-3">
                            Уже есть аккаунт? <a href="{% url 'login' %}" class="text-info">Войти</a>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js"></script>
</body>
</html>

--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/templates/inc/_modal.html ---
{% load static %}

<div class="modal fade" id="infoModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content custom-modal-content">
            <div class="custom-modal-left">
                <div class="user_img"><img src="{% static 'img/fel.jpg' %}"></div>
                <p class="user_name mt-3">{{ user.first_name }}</p>
                <p class="user_name mt-1">{{ user.last_name }}</p>
            </div>
            <div class="custom-modal-right">
                <div class="modal-header custom-modal-header">
                    <h5 class="modal-title info_header" id="exampleModalLabel">Информация</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="info-container">
                        <div>
                            <p class="info_user">Email:</p>
                            <p class="user_information">{{ user.email }}</p>
                        </div>
                        <div style="width: 100px"></div>
                        <div>
                            <p class="info_user">Username:</p>
                            <p class="user_information">{{ user.username }}</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer custom-modal-footer">
                    <div class="set">
                        {# {% if user.is_authenticated %} #}
                        {# <a class="btn_modal text-decoration-none btn_text" href="{% url 'update_user' user.pk %}">Обновить информацию</a> #}
                        {# <a class="btn_modal_active text-decoration-none btn_text" href="{% url 'logout' %}">Выйти</a> #}
                        {# {% endif %} #}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/templates/inc/_header.html ---
{% load static %}

<header class="header d-flex justify-content-between align-items-center">
    <div class="logo"><img src="/static/img/logo.svg" height="50"></div>
    <nav class="d-flex flex-row">
        {% if user.is_authenticated %}
            {% if user.is_superuser or user.is_staff %}
                <a class="nav-link" href="{% url 'user_list' %}">пользователи</a>
                <a class="nav-link" href="{% url 'backup' %}">бэкап</a>
                <a href="{% url 'export_to_excel' %}" class="btn btn-dark w-25">Создать EXCEL документ</a>
            {% endif %}
        {% endif %}
        {% if user.is_authenticated %}
            {% if not user.is_superuser or not user.is_staff %}
                <a class="nav-link" href="{% url 'category_list' %}">категории</a>
                <a class="nav-link" href="{% url 'product_list' %}">продукты</a>
                <a class="nav-link" href="{% url 'stock_list' %}">запасы</a>
                <a class="nav-link" href="{% url 'brand_list' %}">бренды</a>
            {% endif %}
        {% endif %}
        <div class="user-icon">
            <a class="nav-link" id="profile-icon">
                <img src="/static/img/PersonCircle.svg" height="30" alt="User Icon" class="rounded-circle" width="30">
            </a>
        </div>
    </nav>
</header>

<!-- Модальное окно -->
<div class="modal" id="infoModal" tabindex="-1" role="dialog" aria-labelledby="infoModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="infoModalLabel">Информация о профиле</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Никнейм: {{ user.username }}</p>
                <p>Email: {{ user.email }}</p>
                <p>{{ user.first_name }}</p>
                <p>{{ user.last_name }}</p>
                <p>Роль: {% if user.is_superuser %}Администратор{% else %}Менеджер{% endif %}</p>
            </div>
            <div class="modal-footer">
                <a class="btn_modal text-decoration-none btn_text" href="{% url 'update_user' user.pk %}">изменить данные</a>
                <a class="nav-link" href="{% url 'logout' %}">выйти</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Закрыть</button>
            </div>
        </div>
    </div>
</div>

<!-- Скрипт для открытия модального окна -->
<script>
    document.getElementById('profile-icon').addEventListener('click', function () {
        $('#infoModal').modal('show');
    });
</script>

<!-- Подключите Bootstrap CSS и JS, если еще не сделано -->
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/templates/inc/_footer.html ---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>

</body>
</html>

--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/templates/CRUD/brand_list.html ---
{% extends "base.html" %}
{% load static %}

{% block style %}
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
{% endblock %}

{% block content %}
<div class="container">
    <h1>Бренды</h1>

    <form method="get" class="form-inline mb-3">
        <input type="text" name="q" class="form-control" placeholder="Поиск по имени бренда" value="{{ request.GET.q }}">
        <button type="submit" class="btn btn-primary ml-2">Поиск</button>
    </form>

    <button class="btn btn-success mb-3" data-toggle="modal" data-target="#createModal">Добавить брэнд</button>

    <ul class="list-group mb-3">
        {% for brand in object_list %}
            <li class="list-group-item d-flex justify-content-between align-items-center">
                {{ brand.name }}
                <div>
                    <button class="btn btn-warning btn-sm" data-toggle="modal" data-target="#updateModal{{ brand.id }}">Изменить</button>
                    <button class="btn btn-danger btn-sm" data-toggle="modal" data-target="#deleteModal{{ brand.id }}">Удалить</button>
                </div>
            </li>

            <!-- Модальное окно для изменения бренда -->
            <div class="modal fade" id="updateModal{{ brand.id }}" tabindex="-1" role="dialog" aria-labelledby="updateModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <form method="post" action="{% url 'brand_update' brand.id %}">
                            {% csrf_token %}
                            <div class="modal-header">
                                <h5 class="modal-title" id="updateModalLabel">Изменить брэнд</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <input type="text" name="name" class="form-control" value="{{ brand.name }}">
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Закрыть</button>
                                <button type="submit" class="btn btn-primary">Сохранить изменения</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Модальное окно для удаления бренда -->
            <div class="modal fade" id="deleteModal{{ brand.id }}" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="deleteModalLabel">Удаление брэнда</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            Вы уверены, что хотите удалить брэнд "{{ brand.name }}"?
                        </div>
                        <div class="modal-footer">
                            <form method="post" action="{% url 'brand_delete' brand.id %}">
                                {% csrf_token %}
                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Нет</button>
                                <button type="submit" class="btn btn-danger">Да, удалить</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        {% empty %}
            <li class="list-group-item">Бренды не найдены.</li>
        {% endfor %}
    </ul>

    <div class="pagination">
        {% if is_paginated %}
            <span>Страница {{ page_obj.number }} из {{ page_obj.paginator.num_pages }}</span>
            <div>
                {% if page_obj.has_previous %}
                    <a href="?q={{ request.GET.q }}&page=1" class="btn btn-link">Первая</a>
                    <a href="?q={{ request.GET.q }}&page={{ page_obj.previous_page_number }}" class="btn btn-link">Назад</a>
                {% endif %}
                <span>Страница {{ page_obj.number }}</span>
                {% if page_obj.has_next %}
                    <a href="?q={{ request.GET.q }}&page={{ page_obj.next_page_number }}" class="btn btn-link">Вперед</a>
                    <a href="?q={{ request.GET.q }}&page={{ page_obj.paginator.num_pages }}" class="btn btn-link">Последняя</a>
                {% endif %}
            </div>
        {% endif %}
    </div>
</div>

<!-- Модальное окно для добавления бренда -->
<div class="modal fade" id="createModal" tabindex="-1" role="dialog" aria-labelledby="createModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <form method="post" action="{% url 'brand_create' %}">
                {% csrf_token %}
                <div class="modal-header">
                    <h5 class="modal-title" id="createModalLabel">Добавить брэнд</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <input type="text" name="name" class="form-control" placeholder="Название брэнда">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Закрыть</button>
                    <button type="submit" class="btn btn-primary">Добавить</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
{% endblock %}


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/templates/CRUD/stock_list.html ---
{% extends 'base.html' %}
{% load static %}
{% block style %}
<link rel="stylesheet" href="{% static 'css/bootstrap.min.css' %}">
{% endblock %}

{% block content %}
<div class="container">
    <h1>Склад</h1>

    <!-- Кнопка для открытия модального окна добавления продукта -->
    <button class="btn btn-primary" data-toggle="modal" data-target="#addModal">Добавить продукт</button>

    <!-- Модальное окно для добавления продукта -->
    <div class="modal fade" id="addModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <form method="POST" action="{% url 'stock_create' %}">
                    {% csrf_token %}
                    <div class="modal-header">
                        <h5 class="modal-title">Добавить продукт</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="cell_number">Номер ячейки</label>
                            <input type="text" name="cell_number" class="form-control" placeholder="Введите номер ячейки" required>
                        </div>
                        <div class="form-group">
                            <label for="product">Продукт</label>
                            <select name="product" class="form-control" required>
                                {% for product in products %}
                                    <option value="{{ product.id }}">{{ product.name }}</option>
                                {% endfor %}
                            </select>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Закрыть</button>
                        <button type="submit" class="btn btn-primary">Добавить продукт</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Поиск по наименованию продукта -->
    <form method="GET" class="mt-3">
        <input type="text" name="q" placeholder="Поиск по наименованию" class="form-control" value="{{ request.GET.q }}">
        <button type="submit" class="btn btn-secondary mt-2">Поиск</button>
    </form>

    <!-- Таблица со всеми ячейками и продуктами -->
    <table class="table table-bordered mt-3">
        <thead>
            <tr>
                <th>Ячейка</th>
                <th>Продукт</th>
                <th>Количество</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            {% for stock in object_list %}
            <tr>
                <td>{{ stock.cell_number }}</td>
                <td>{{ stock.product.name }}</td>
                <td>{{ stock.product.quantity }}</td>
                <td>
                    <button class="btn btn-warning" data-toggle="modal" data-target="#editModal{{ stock.id }}">Изменить</button>
                    <button class="btn btn-danger" data-toggle="modal" data-target="#deleteModal{{ stock.id }}">Удалить</button>
                </td>
            </tr>

            <!-- Модальное окно для изменения продукта -->
            <div class="modal fade" id="editModal{{ stock.id }}" tabindex="-1" role="dialog">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <form method="POST" action="{% url 'stock_update' stock.id %}">
                            {% csrf_token %}
                            <div class="modal-header">
                                <h5 class="modal-title">Изменить продукт</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <div class="form-group">
                                    <label for="cell_number">Номер ячейки</label>
                                    <input type="text" name="cell_number" class="form-control" value="{{ stock.cell_number }}" required>
                                </div>
                                <div class="form-group">
                                    <label for="product">Продукт</label>
                                    <select name="product" class="form-control" required>
                                        {% for product in products %}
                                            <option value="{{ product.id }}" {% if product.id == stock.product.id %}selected{% endif %}>{{ product.name }}</option>
                                        {% endfor %}
                                    </select>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Закрыть</button>
                                <button type="submit" class="btn btn-primary">Сохранить изменения</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Модальное окно для удаления продукта -->
            <div class="modal fade" id="deleteModal{{ stock.id }}" tabindex="-1" role="dialog">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Подтверждение удаления</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <p>Вы уверены, что хотите удалить продукт "{{ stock.product.name }}"?</p>
                        </div>
                        <div class="modal-footer">
                            <form method="POST" action="{% url 'stock_delete' stock.id %}">
                                {% csrf_token %}
                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Нет</button>
                                <button type="submit" class="btn btn-danger">Да, удалить</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
            {% endfor %}
        </tbody>
    </table>
</div>

<script src="{% static 'js/jquery.min.js' %}"></script>
<script src="{% static 'js/bootstrap.bundle.min.js' %}"></script>
{% endblock %}


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/templates/CRUD/category_list.html ---
{% extends 'base.html' %}

{% block style %}
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
{% endblock %}

{% block content %}
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">

    <div class="container">
        <h1>Категории</h1>

        <form method="get" class="form-inline mb-3">
            <input type="text" name="q" class="form-control" placeholder="Поиск по имени категории"
                   value="{{ request.GET.q }}">
            <button type="submit" class="btn btn-primary">Поиск</button>
        </form>

        <button class="btn btn-success mb-3" data-toggle="modal" data-target="#createModal">Добавить категорию</button>

        <ul class="list-group">
            {% for category in object_list %}
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    {{ category.name }}
                    <div>
                        <button class="btn btn-warning btn-sm" data-toggle="modal"
                                data-target="#updateModal{{ category.id }}">Изменить
                        </button>
                        <button class="btn btn-danger btn-sm" data-toggle="modal"
                                data-target="#deleteModal{{ category.id }}">Удалить
                        </button>
                    </div>
                </li>

                <!-- Модальное окно для изменения категории -->
                <div class="modal fade" id="updateModal{{ category.id }}" tabindex="-1" role="dialog"
                     aria-labelledby="updateModalLabel" aria-hidden="true">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <form method="post" action="{% url 'category_update' category.id %}">
                                {% csrf_token %}
                                <div class="modal-header">
                                    <h5 class="modal-title" id="updateModalLabel">Изменить категорию</h5>
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body">
                                    <input type="text" name="name" class="form-control" value="{{ category.name }}">
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Закрыть
                                    </button>
                                    <button type="submit" class="btn btn-primary">Сохранить изменения</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>

                <!-- Модальное окно для удаления категории -->
                <div class="modal fade" id="deleteModal{{ category.id }}" tabindex="-1" role="dialog"
                     aria-labelledby="deleteModalLabel" aria-hidden="true">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="deleteModalLabel">Удаление категории</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                Вы уверены, что хотите удалить категорию "{{ category.name }}"?
                            </div>
                            <div class="modal-footer">
                                <form method="post" action="{% url 'category_delete' category.id %}">
                                    {% csrf_token %}
                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Нет</button>
                                    <button type="submit" class="btn btn-danger">Да, удалить</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            {% empty %}
                <li class="list-group-item">Категории не найдены.</li>
            {% endfor %}
        </ul>

        <div class="pagination">
            {% if is_paginated %}
                <span>Страница {{ page_obj.number }} из {{ page_obj.paginator.num_pages }}</span>
                <div>
                    {% if page_obj.has_previous %}
                        <a href="?q={{ request.GET.q }}&page=1" class="btn btn-link">Первая</a>
                        <a href="?q={{ request.GET.q }}&page={{ page_obj.previous_page_number }}" class="btn btn-link">Назад</a>
                    {% endif %}
                    <span>Страница {{ page_obj.number }}</span>
                    {% if page_obj.has_next %}
                        <a href="?q={{ request.GET.q }}&page={{ page_obj.next_page_number }}" class="btn btn-link">Вперед</a>
                        <a href="?q={{ request.GET.q }}&page={{ page_obj.paginator.num_pages }}" class="btn btn-link">Последняя</a>
                    {% endif %}
                </div>
            {% endif %}
        </div>
    </div>

    <!-- Модальное окно для добавления категории -->
    <div class="modal fade" id="createModal" tabindex="-1" role="dialog" aria-labelledby="createModalLabel"
         aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <form method="post" action="{% url 'category_create' %}">
                    {% csrf_token %}
                    <div class="modal-header">
                        <h5 class="modal-title" id="createModalLabel">Добавить категорию</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <input type="text" name="name" class="form-control" placeholder="Название категории">
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Закрыть</button>
                        <button type="submit" class="btn btn-primary">Добавить</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
{% endblock %}

--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/templates/CRUD/create_form.html ---
{% extends 'base.html' %}


{% block content %}
    
    <div class="container mt-5">
        <h1>Создание продукта</h1>
        <form method="post" enctype="multipart/form-data" class="mb-4">
            {% csrf_token %}
            {{ form.as_p }}
            <button class="btn btn-primary" type="submit">Создать продукт</button>
        </form>
    </div>

{% endblock %}


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/templates/CRUD/product_list.html ---
{% extends 'base.html' %}
{% load static %}

{% block style %}
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
{% endblock %}

{% block content %}
    <div class="container mt-5">
        <h1>Продукты</h1>
        <button class="btn btn-success mb-3" data-toggle="modal" data-target="#createModal">Добавить продукт</button>

        <form method="GET" class="mb-4">
            <div class="input-group mb-3">
                <input type="text" class="form-control" name="q" placeholder="Поиск по имени продукта"
                       value="{{ request.GET.q }}">
                <div class="input-group-append">
                    <button class="btn btn-primary" type="submit">Поиск</button>
                </div>
            </div>

            <div class="mb-4">
                <h5>Категории:</h5>
                {% for category in categories %}
                    <a href="?category={{ category.id }}&q={{ request.GET.q }}&brands={{ request.GET.brands|join:',' }}"
                       class="btn btn-info btn-sm mr-2">{{ category.name }}</a>
                {% endfor %}

                <h5>Бренды:</h5>
                {% for brand in brands %}
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="brands" value="{{ brand.id }}"
                               id="brand{{ brand.id }}"
                               {% if brand.id|stringformat:"s" in request.GET.brands %}checked{% endif %}>
                        <label class="form-check-label" for="brand{{ brand.id }}">{{ brand.name }}</label>
                    </div>
                {% endfor %}
            </div>

            <div class="mb-4">
                <h5>Цена:</h5>
                <div class="input-group">
                    <input type="number" class="form-control" name="price_min" placeholder="От"
                           value="{{ request.GET.price_min }}">
                    <input type="number" class="form-control" name="price_max" placeholder="До"
                           value="{{ request.GET.price_max }}">
                </div>
            </div>

            <button type="submit" class="btn btn-secondary">Применить фильтры</button>
        </form>

        <div class="row">
            {% for product in object_list %}
                <div class="col-md-4 mb-4">
                    <div class="card">
                        <img src="{{ product.image.url }}" class="card-img-top" alt="{{ product.name }}">
                        <div class="card-body">
                            <h5 class="card-title">{{ product.name }}</h5>
                            <p class="card-text">
                                <strong>Цена:</strong> {{ product.price }}<br>
                                <strong>Артикул:</strong> {{ product.article }}<br>
                                <strong>Бренд:</strong> {{ product.brand.name }}<br>
                                <strong>Категория:</strong> {{ product.category.name }}<br>
                                <strong>Количество:</strong> {{ product.quantity }}<br>
                                <strong>Описание:</strong> {{ product.description }}<br>
                            </p>
                            <button class="btn btn-warning" data-toggle="modal"
                                    data-target="#updateModal{{ product.id }}">Изменить
                            </button>
                            <button class="btn btn-danger" data-toggle="modal"
                                    data-target="#deleteModal{{ product.id }}">Удалить
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Модальное окно для изменения продукта -->
                <div class="modal fade" id="updateModal{{ product.id }}" tabindex="-1" role="dialog"
                     aria-labelledby="updateModalLabel" aria-hidden="true">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <form method="post" action="{% url 'product_update' product.id %}"
                                  enctype="multipart/form-data">
                                {% csrf_token %}
                                <div class="modal-header">
                                    <h5 class="modal-title" id="updateModalLabel">Изменить продукт</h5>
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body">
                                    <input type="text" name="name" class="form-control" value="{{ product.name }}"
                                           required>
                                    <input type="number" name="price" class="form-control mt-2"
                                           value="{{ product.price }}" required>
                                    <input type="text" name="article" class="form-control mt-2"
                                           value="{{ product.article }}" readonly>
                                    <input type="number" name="quantity" class="form-control mt-2"
                                           value="{{ product.quantity }}" required>
                                    <textarea name="description" class="form-control mt-2" placeholder="Описание"
                                              required>{{ product.description }}</textarea>
                                    <input type="file" name="image" class="form-control mt-2">
                                    <select name="brand" class="form-control mt-2" required>
                                        <option value="">Выберите бренд</option>
                                        {% for brand in brands %}
                                            <option value="{{ brand.id }}"
                                                    {% if brand.id == product.brand.id %}selected{% endif %}>{{ brand.name }}</option>
                                        {% endfor %}
                                    </select>
                                    <select name="category" class="form-control mt-2" required>
                                        <option value="">Выберите категорию</option>
                                        {% for category in categories %}
                                            <option value="{{ category.id }}"
                                                    {% if category.id == product.category.id %}selected{% endif %}>{{ category.name }}</option>
                                        {% endfor %}
                                    </select>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Закрыть
                                    </button>
                                    <button type="submit" class="btn btn-primary">Сохранить изменения</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>

                <!-- Модальное окно для удаления продукта -->
                <div class="modal fade" id="deleteModal{{ product.id }}" tabindex="-1" role="dialog"
                     aria-labelledby="deleteModalLabel" aria-hidden="true">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="deleteModalLabel">Удаление продукта</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                Вы уверены, что хотите удалить продукт "{{ product.name }}"?
                            </div>
                            <div class="modal-footer">
                                <form method="post" action="{% url 'product_delete' product.id %}">
                                    {% csrf_token %}
                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Нет</button>
                                    <button type="submit" class="btn btn-danger">Да, удалить</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            {% empty %}
                <div class="col-12">
                    <div class="alert alert-warning" role="alert">
                        Продукты не найдены.
                    </div>
                </div>
            {% endfor %}
        </div>

        <div class="pagination">
            {% if is_paginated %}
                <span>Страница {{ page_obj.number }} из {{ page_obj.paginator.num_pages }}</span>
                <nav>
                    <ul class="pagination">
                        {% if page_obj.has_previous %}
                            <li class="page-item">
                                <a class="page-link"
                                   href="?q={{ request.GET.q }}&category={{ request.GET.category }}&brands={{ request.GET.brands|join:',' }}&page=1">Первая</a>
                            </li>
                            <li class="page-item">
                                <a class="page-link"
                                   href="?q={{ request.GET.q }}&category={{ request.GET.category }}&brands={{ request.GET.brands|join:',' }}&page={{ page_obj.previous_page_number }}">Назад</a>
                            </li>
                        {% endif %}
                        <li class="page-item active">
                            <span class="page-link">{{ page_obj.number }}</span>
                        </li>
                        {% if page_obj.has_next %}
                            <li class="page-item">
                                <a class="page-link"
                                   href="?q={{ request.GET.q }}&category={{ request.GET.category }}&brands={{ request.GET.brands|join:',' }}&page={{ page_obj.next_page_number }}">Вперед</a>
                            </li>
                            <li class="page-item">
                                <a class="page-link"
                                   href="?q={{ request.GET.q }}&category={{ request.GET.category }}&brands={{ request.GET.brands|join:',' }}&page={{ page_obj.paginator.num_pages }}">Последняя</a>
                            </li>
                        {% endif %}
                    </ul>
                </nav>
            {% endif %}
        </div>
    </div>

    <!-- Модальное окно для добавления продукта -->
    <div class="modal fade" id="createModal" tabindex="-1" role="dialog" aria-labelledby="createModalLabel"
         aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <form method="post" action="{% url 'product_create' %}" enctype="multipart/form-data">
                    {% csrf_token %}
                    <div class="modal-header">
                        <h5 class="modal-title" id="createModalLabel">Добавить продукт</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <input type="text" name="name" class="form-control" placeholder="Название продукта" required>
                        <input type="number" name="price" class="form-control mt-2" placeholder="Цена" required>
                        <input type="number" name="quantity" class="form-control mt-2" placeholder="Количество"
                               required>
                        <textarea name="description" class="form-control mt-2" placeholder="Описание"
                                  required></textarea>
                        <input type="file" name="image" class="form-control mt-2">
                        <select name="brand" class="form-control mt-2" required>
                            <option value="">Выберите бренд</option>
                            {% for brand in brands %}
                                <option value="{{ brand.id }}">{{ brand.name }}</option>
                            {% endfor %}
                        </select>
                        <select name="category" class="form-control mt-2" required>
                            <option value="">Выберите категорию</option>
                            {% for category in categories %}
                                <option value="{{ category.id }}">{{ category.name }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Закрыть</button>
                        <button type="submit" class="btn btn-primary">Добавить</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
{% endblock %}




--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/Lessons /shopcode.txt ---
--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/ShopPart/models.py ---
from django.db import models
from django.conf import settings
from ManagerPannel.models import  Product
from AdminPannel.models import User
import pgtrigger

class Status(models.Model):
    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name

class DeliveryType(models.Model):
    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name


class Country(models.Model):
    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name


class Address(models.Model):
    street = models.CharField(max_length=255)
    city = models.CharField(max_length=100)
    postal_code = models.CharField(max_length=20)
    country = models.ForeignKey(Country, on_delete=models.CASCADE)
    house_number = models.CharField(max_length=10)

    def __str__(self):
        return f'{self.street}, {self.city}, {self.country.name}'


class Cart(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField()


class Order(models.Model):
    order_number = models.CharField(max_length=100)
    customer = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    order_date = models.DateTimeField(auto_now_add=True)
    total_amount = models.DecimalField(max_digits=10, decimal_places=2)
    status = models.ForeignKey(Status, on_delete=models.CASCADE)
    cart = models.ForeignKey(Cart, on_delete=models.CASCADE)
    is_active = models.BooleanField(default=True)

    class Meta:
        triggers = [
            pgtrigger.SoftDelete(name='soft_delete', field='is_active')
        ]


class Delivery(models.Model):
    order = models.OneToOneField(Order, on_delete=models.CASCADE)
    delivery_date = models.DateTimeField()
    delivery_time = models.TimeField()
    address = models.ForeignKey(Address, on_delete=models.CASCADE)
    delivery_type = models.ForeignKey(DeliveryType, on_delete=models.CASCADE)
    comments = models.TextField(blank=True, null=True)

class Payment(models.Model):
    PAY_CHOICES = (
        ('Наличными','Наличными'),
        ('Картой','Картой'),
    )
    order = models.OneToOneField(Order, on_delete=models.CASCADE)
    payment_date = models.DateTimeField(auto_now_add=True)
    payment_method = models.CharField(max_length=100, choices=PAY_CHOICES)


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/ShopPart/apps.py ---
from django.apps import AppConfig


class ShoppartConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'ShopPart'


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/ShopPart/admin.py ---
from django.contrib import admin

from ShopPart.models import Status, Delivery, Country, Address, Cart, Order, DeliveryType, Payment

# Register your models here.

admin.site.register(Status)
admin.site.register(Delivery)
admin.site.register(Country)
admin.site.register(Address)
admin.site.register(Cart)
admin.site.register(Order)
admin.site.register(DeliveryType)
admin.site.register(Payment)


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/ShopPart/tests.py ---
from django.test import TestCase

# Create your tests here.


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/ShopPart/views.py ---
from django.shortcuts import render

# Create your views here.




--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/Lessons /managecode.txt ---
--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/ManagerPannel/models.py ---
from django.core.validators import MinValueValidator, MaxValueValidator
from django.db import models
import pgtrigger

from AdminPannel.models import User


class Category(models.Model):
    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name

class Brand(models.Model):
    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name

class Product(models.Model):
    category = models.ForeignKey(Category, on_delete=models.CASCADE)
    brand = models.ForeignKey(Brand, on_delete=models.CASCADE)
    article = models.CharField(max_length=50)
    name = models.CharField(max_length=100)
    description = models.TextField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    image = models.ImageField(upload_to='KorShop/media', blank=True, null=True)
    quantity = models.PositiveIntegerField()
    is_active = models.BooleanField(default=True)

    class Meta:
        triggers = [
            pgtrigger.SoftDelete(name='soft_delete', field='is_active')
        ]

    def __str__(self):
        return self.name

class Review(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    rating = models.IntegerField(
        validators=[
            MinValueValidator(1),
            MaxValueValidator(5)
        ]
    )
    comment = models.TextField()
    review_date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f'Review by {self.user.username} on {self.product.name}'

class Stock(models.Model):
    cell_number = models.CharField(max_length=50)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)

    def __str__(self):
        return f'Stock cell {self.cell_number} for {self.product.name}'


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/ManagerPannel/apps.py ---
from django.apps import AppConfig


class ManagerpannelConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'ManagerPannel'


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/ManagerPannel/forms.py ---
from django import forms
from .models import Brand, Category, Product, Stock

class BrandForm(forms.ModelForm):
    class Meta:
        model = Brand
        fields = ['name']

class CategoryForm(forms.ModelForm):
    class Meta:
        model = Category
        fields = ['name']

class ProductForm(forms.ModelForm):
    class Meta:
        model = Product
        fields = ['category', 'brand', 'name', 'description', 'price', 'image', 'quantity']

class StockForm(forms.ModelForm):
    class Meta:
        model = Stock
        fields = ['cell_number', 'product']


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/ManagerPannel/admin.py ---
from django.contrib import admin
from .models import Category, Brand, Product, Review, Stock

# Register your models here.
admin.site.register(Category)
admin.site.register(Brand)
admin.site.register(Product)
admin.site.register(Review)
admin.site.register(Stock)

--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/ManagerPannel/routing.py ---
from django.urls import path, include

from ManagerPannel.views import (
    CategoryCreateView, CategoryListView, ProductListView, StockListView, BrandListView, ProductUpdateView, ProductCreateView, BrandCreateView, BrandUpdateView,
    BrandDeleteView, StockCreateView, StockUpdateView, StockDeleteView, CategoryUpdateView,
    CategoryDeleteView, ProductDeleteView
)

urlpatterns = [
    path('category_create/', CategoryCreateView.as_view(), name='category_create'),
    path('category_list/', CategoryListView.as_view(), name='category_list'),
    path('category_update/<int:pk>/', CategoryUpdateView.as_view(), name='category_update'),
    path('category_delete/<int:pk>/', CategoryDeleteView.as_view(), name='category_delete'),

    path('product_list/', ProductListView.as_view(), name='product_list'),
    # path('product_detail/<int:pk>/', ProductDetailView.as_view(), name='product_detail'),
    path('product_create/', ProductCreateView.as_view(), name='product_create'),
    path('product_update/<int:pk>/', ProductUpdateView.as_view(), name='product_update'),
    path('product_delete/<int:pk>/', ProductDeleteView.as_view(), name='product_delete'),

    path('stock_list/', StockListView.as_view(), name='stock_list'),
    path('stock_create/', StockCreateView.as_view(), name='stock_create'),
    path('stock_update/<int:pk>/', StockUpdateView.as_view(), name='stock_update'),
    path('stock_delete/<int:pk>/', StockDeleteView.as_view(), name='stock_delete'),

    path('brand_list/', BrandListView.as_view(), name='brand_list'),
    path('brand_create/', BrandCreateView.as_view(), name='brand_create'),
    path('brand_update/<int:pk>/', BrandUpdateView.as_view(), name='brand_update'),
    path('brand_delete/<int:pk>/', BrandDeleteView.as_view(), name='brand_delete'),
]


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/ManagerPannel/tests.py ---
from django.test import TestCase

# Create your tests here.


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/ManagerPannel/views.py ---
import uuid

from django.shortcuts import render, get_object_or_404, redirect
from django.views.generic import CreateView, ListView, UpdateView, DeleteView, DetailView
from rest_framework.reverse import reverse_lazy

from .models import Brand, Category, Product, Stock
from django.db.models import Q
from .forms import BrandForm, CategoryForm, ProductForm, StockForm


# --------- List View ---------#

class CategoryListView(ListView):
    model = Category
    template_name = "CRUD/category_list.html"
    paginate_by = 10

    def get_queryset(self):
        query = self.request.GET.get('q')
        if query:
            return Category.objects.filter(name__icontains=query)
        return super().get_queryset()

class BrandListView(ListView):
    model = Brand
    template_name = "CRUD/brand_list.html"
    paginate_by = 10

    def get_queryset(self):
        query = self.request.GET.get('q')
        if query:
            return Brand.objects.filter(name__icontains=query)
        return super().get_queryset()

 # --------- Create View ---------#

class CategoryCreateView(CreateView):
    model = Category
    form_class = CategoryForm
    success_url = reverse_lazy('category_list')

class BrandCreateView(CreateView):
    model = Brand
    template_name = "CRUD/create_form.html"
    form_class = BrandForm
    success_url = reverse_lazy('brand_list')




 # --------- Update View ---------#

class BrandUpdateView(UpdateView):
    model = Brand
    template_name = "CRUD/create_form.html"
    form_class = BrandForm
    success_url = reverse_lazy('brand_list')

class CategoryUpdateView(UpdateView):
    model = Category
    form_class = CategoryForm
    success_url = reverse_lazy('category_list')


class StockListView(ListView):
    model = Stock
    template_name = "CRUD/stock_list.html"
    paginate_by = 10

    def get_queryset(self):
        query = self.request.GET.get('q')
        if query:
            return Stock.objects.filter(product__name__icontains=query)
        return super().get_queryset()

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['products'] = Product.objects.all()
        return context


class StockCreateView(CreateView):
    model = Stock
    template_name = "CRUD/create_form.html"
    form_class = StockForm
    success_url = reverse_lazy('stock_list')

class StockUpdateView(UpdateView):
    model = Stock
    template_name = "CRUD/create_form.html"
    form_class = StockForm
    success_url = reverse_lazy('stock_list')

class StockDeleteView(DeleteView):
    model = Stock
    success_url = reverse_lazy('stock_list')

 # --------- Delete View ---------#

class CategoryDeleteView(DeleteView):
    model = Category
    success_url = reverse_lazy('category_list')

class BrandDeleteView(DeleteView):
    model = Brand
    success_url = reverse_lazy('brand_list')



 # --------- Detail View ---------#

def generate_article():
    return str(uuid.uuid4())[:8]


class ProductListView(ListView):
    model = Product
    template_name = "CRUD/product_list.html"
    paginate_by = 10

    def get_queryset(self):
        query = self.request.GET.get('q')
        category_id = self.request.GET.get('category')
        brand_ids = self.request.GET.getlist('brands')  # Получаем список выбранных брендов
        price_min = self.request.GET.get('price_min')  # Минимальная цена
        price_max = self.request.GET.get('price_max')  # Максимальная цена

        queryset = Product.objects.all()

        if category_id:
            queryset = queryset.filter(category_id=category_id)
        if brand_ids:
            queryset = queryset.filter(brand_id__in=brand_ids)
        if query:
            queryset = queryset.filter(name__icontains=query)
        if price_min:
            queryset = queryset.filter(price__gte=price_min)
        if price_max:
            queryset = queryset.filter(price__lte=price_max)

        return queryset

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['brands'] = Brand.objects.all()
        context['categories'] = Category.objects.all()
        return context



class ProductCreateView(CreateView):
    model = Product
    form_class = ProductForm
    success_url = reverse_lazy('product_list')
    template_name = "CRUD/create_form.html"

    def form_valid(self, form):
        form.instance.article = generate_article()
        return super().form_valid(form)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['brands'] = Brand.objects.all()
        context['categories'] = Category.objects.all()
        return context

class ProductUpdateView(UpdateView):
    model = Product
    form_class = ProductForm
    success_url = reverse_lazy('product_list')
    template_name = "CRUD/create_form.html"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['brands'] = Brand.objects.all()
        context['categories'] = Category.objects.all()
        return context

class ProductDeleteView(DeleteView):
    model = Product
    success_url = reverse_lazy('product_list')

class ProductDetailView(DetailView):
    model = Product
    template_name = 'CRUD/product_detail.html'




--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/Lessons /authcode.txt ---
--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/AuthSystem/models.py ---
from django.db import models

# Create your models here.


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/AuthSystem/apps.py ---
from django.apps import AppConfig


class AuthsystemConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'AuthSystem'


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/AuthSystem/forms.py ---
from django.contrib.auth import get_user_model
from django.contrib.auth.forms import UserCreationForm
from django import forms

from AdminPannel.models import Role


class RegisterUserForm(UserCreationForm):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields["username"].widget.attrs.update({
            'type': "text",
            'placeholder': "username...",
            'id': "userName",
            'name': "username",
            'class': "form-control form-control-lg mb-2 add"
        })
        self.fields["email"].widget.attrs.update({
            'type': "email",
            'placeholder': "email...",
            'id': "email",
            'name': "email",
            'class': "form-control form-control-lg mb-2 add"
        })
        self.fields["password1"].widget.attrs.update({
            'type': "password",
            'placeholder': "password1...",
            'id': "password1",
            'name': "password1",
            'class': "form-control form-control-lg mb-2 add"
        })
        self.fields["password2"].widget.attrs.update({
            'type': "password",
            'placeholder': "password2...",
            'id': "password2",
            'name': "password2",
            'class': "form-control form-control-lg mb-2 add"
        })

    class Meta:
        model = get_user_model()
        fields = ['username', 'email', 'password1', 'password2']

    def save(self, commit=True):
        user = super().save(commit=False)
        user.role = Role.objects.get(role_name="Покупатель")
        if commit:
            user.save()
        return user



# class UserUpdateForm(forms.ModelForm):
#     class Meta:
#         model = get_user_model()
#         fields = ['username', 'first_name', 'last_name', 'email']
#
#     def __init__(self, *args, **kwargs):
#         super().__init__(*args, **kwargs)
#         self.fields["username"].widget.attrs.update({
#             'type': "text",
#             'placeholder': "username...",
#             'id': "userName",
#             'name': "username",
#             'class': "form-control form-control-lg mb-2 add size"
#         })
#         self.fields["email"].widget.attrs.update({
#             'type': "email",
#             'placeholder': "email...",
#             'id': "email",
#             'name': "email",
#             'class': "form-control form-control-lg mb-2 add size"
#         })
#         self.fields["first_name"].widget.attrs.update({
#             'placeholder': "first name...",
#             'class': "form-control form-control-lg mb-2 add size"
#         })
#         self.fields["last_name"].widget.attrs.update({
#             'placeholder': "second name...",
#             'class': "form-control form-control-lg mb-2 add size"
#         })

from django import forms
from django.contrib.auth.forms import PasswordChangeForm
from django.contrib.auth import get_user_model

class UserUpdateForm(forms.ModelForm):
    patronymic = forms.CharField(max_length=30, required=False, widget=forms.TextInput(attrs={
        'placeholder': "отчество...",
        'class': "form-control form-control-lg mb-2 add size"
    }))
    profile_picture = forms.ImageField(required=False)

    class Meta:
        model = get_user_model()
        fields = ['username', 'first_name', 'last_name', 'email', 'patronymic', 'profile_picture']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields["username"].widget.attrs.update({
            'type': "text",
            'placeholder': "username...",
            'class': "form-control form-control-lg mb-2 add size"
        })
        self.fields["email"].widget.attrs.update({
            'type': "email",
            'placeholder': "email...",
            'class': "form-control form-control-lg mb-2 add size"
        })
        self.fields["first_name"].widget.attrs.update({
            'placeholder': "first name...",
            'class': "form-control form-control-lg mb-2 add size"
        })
        self.fields["last_name"].widget.attrs.update({
            'placeholder': "last name...",
            'class': "form-control form-control-lg mb-2 add size"
        })

class PasswordChangeFormCustom(PasswordChangeForm):
    old_password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control'}))
    new_password1 = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control'}))
    new_password2 = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control'}))


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/AuthSystem/admin.py ---
from django.contrib import admin

# Register your models here.


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/AuthSystem/routing.py ---
from django.urls import path, include

from .views import *
urlpatterns = [

    path('accounts/', include('django.contrib.auth.urls')),
    path('logout/', logout_user, name='logout'),
    path('accounts/login/', AccountLoginView.as_view(),
         name='logining'),
    path('signup/', SignUp.as_view(), name='signup'),
    path('<int:pk>/update/', UserUpdateView.as_view(), name='update_user'),

]

--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/AuthSystem/tests.py ---
from django.test import TestCase

# Create your tests here.


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/AuthSystem/views.py ---
from django.contrib.auth import logout
from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.auth.views import LoginView
from django.shortcuts import render, redirect
from django.urls import reverse_lazy, reverse
from django.views.generic import CreateView, UpdateView

from AdminPannel.models import User, Role
from AuthSystem.forms import RegisterUserForm, UserUpdateForm


# Create your views here.
def home(request):
    context = {}
    return render(request, 'system_settings_page.html', context = context)


class SignUp(CreateView):
    form_class = RegisterUserForm
    success_url = reverse_lazy("login")
    template_name = "registration/registration.html"


def logout_user(request):
    logout(request)
    return redirect('logining')




class AccountLoginView(LoginView):
    template_name = 'registration/login.html'

    def get_success_url(self):
        user = self.request.user
        if user.is_authenticated:
            if user.role:  # Проверяем, есть ли роль
                if user.role.role_name == 'Менеджер':  # Проверяем название роли
                    return reverse('home')
                elif user.role.role_name == 'Администратор':
                    return reverse('user_list')
        return super().get_success_url()
#
# class AccountLoginView(LoginView):
#     template_name = 'registration/login.html'
#
#     def get_success_url(self):
#         user = self.request.user
#         if user.role and user.role.role_name == "Менеджер":
#             return reverse_lazy('home')
#         elif user.role and user.role.role_name == "Администратор":
#             return reverse_lazy('user_list')
#         return super().get_success_url()  # В случае, если роль не определена

@login_required
def profile_view(request):
    return render(request, 'registration/profile.html')

class UserUpdateView(LoginRequiredMixin, UpdateView):
    model = User
    form_class = UserUpdateForm
    template_name = 'registration/profile.html'
    success_url = reverse_lazy('user_list')

    def get_object(self, queryset=None):
        return self.request.user




--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/Lessons /korcode.txt ---
--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/KorShop/asgi.py ---
"""
ASGI config for KorShop project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'KorShop.settings')

application = get_asgi_application()


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/KorShop/settings.py ---
"""
Django settings for KorShop project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path
from AdminPannel.utils import LogErrorsMiddleware
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-)j#v6w0#4+dce^u276!s*u_5wm6=po1$hr!0s)5!9j2+(29o(p'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']
# ALLOWED_HOSTS = []

DEBUG_PROPAGATE_EXCEPTIONS = True

LOGIN_REDIRECT_URL = 'system_settings'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'AdminPannel',
    'ManagerPannel',
    'KorShop',
    'ShopPart',
    'pgtrigger'

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'AdminPannel.middleware.logger_middleware.LogErrorsMiddleware'
]

ROOT_URLCONF = 'KorShop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.static',

            ],
        },
    },
]

WSGI_APPLICATION = 'KorShop.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        # 'NAME': 'KorShopDatabase',
        'NAME': 'TestBase',
        'HOST': 'localhost',
        'PORT': '5432',
        'USER': 'postgres',
        'PASSWORD': '123',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
# settings.py

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
    'static/',
]

# MEDIA
MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'AdminPannel.User'

CRISPY_TEMPLATE_PACK = 'bootstrap5'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'isip_a.a.konyhova@mpt.ru'
EMAIL_HOST_PASSWORD = 'TitaV682'


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/KorShop/urls.py ---
from django.conf.urls.static import static
from django.contrib import admin
from django.urls import path, include
from KorShop import settings

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('AuthSystem.routing')),
    path('', include('ManagerPannel.routing')),
    path('', include('AdminPannel.routing')),

]
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/KorShop/wsgi.py ---
"""
WSGI config for KorShop project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'KorShop.settings')

application = get_wsgi_application()




--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/Lessons /output.txt ---
--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/AdminPannel/models.py ---
from django.contrib.auth.models import AbstractUser
from django.db import models
import pgtrigger

# Create your models here.
class Role(models.Model):
    role_name = models.CharField(max_length=50)
    def __str__(self):
        return self.role_name

class User(AbstractUser):
    # is_verified = models.BooleanField(default=False)
    profile_picture = models.ImageField(upload_to='profile_pictures/%Y/%m/%d', blank=True, null=True)
    role = models.ForeignKey(Role, on_delete=models.CASCADE,  blank=True, null=True)
    patronymic = models.CharField(max_length=30, blank=True)
    not_deleted = models.BooleanField(default=True)

    class Meta:
        triggers = [
            pgtrigger.SoftDelete(name='soft_delete', field='not_deleted')
        ]

    def __str__(self):
        return self.username



--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/AdminPannel/apps.py ---
from django.apps import AppConfig


class AdminpannelConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'AdminPannel'


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/AdminPannel/admin.py ---
from django.contrib import admin
from .models import Role, User

admin.site.register(Role)
admin.site.register(User)


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/AdminPannel/utils.py ---
from django.utils.datetime_safe import datetime


class LogErrorsMiddleware(object):
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        try:
            response = self.get_response(request)
        except Exception as e:
            self.log_error(request, e)
            raise

        return response

    def log_error(self, request, exception):
        # Log the error to a file
        with open('logs.log', 'a') as f:
            f.write(f"{datetime.now()} - {request.method} {request.path} {exception}\n")
        print(f"{datetime.now()} - {request.method} {request.path} {exception}")

--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/AdminPannel/routing.py ---
from AdminPannel.views import UserListView, block_user_view, change_user_role, system_settings, create_user_view, \
    unblock_user_view, pg_backup, ExportDataToExcel
from django.urls import path, include

urlpatterns = [
    # path('', views.adminHome, name='home'),
    path('users/', UserListView.as_view(), name='user_list'),
    path('block_user/<int:user_id>/', block_user_view, name='block_user'),
    path('unblock_user/<int:user_id>/', unblock_user_view, name='unblock_user'),
    path('users/change-role/', change_user_role, name='change_user_role'),
    path('settings/', system_settings, name='system_settings'),
    path('create_user/', create_user_view, name='create_user'),

    path('backup/', pg_backup, name='backup'),
    path('export/', ExportDataToExcel, name='export_to_excel'),

]


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/AdminPannel/tests.py ---
from django.test import TestCase

# Create your tests here.


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/AdminPannel/views.py ---
import io
import os
import string
import random
from datetime import datetime
from email.message import EmailMessage

import pandas as pd
from django.contrib.auth.hashers import make_password
from django.http import HttpResponse
from django.shortcuts import render, get_object_or_404, redirect
from django.views.decorators.http import require_POST
from django.views.generic import ListView

from KorShop import settings
from .models import User, Role
from django.db.models import Q
import csv

def block_user_view(request, user_id):
    user = get_object_or_404(User, id=user_id)
    user.is_active = False  
    user.save()
    return redirect('user_list')

def unblock_user_view(request, user_id):
    user = get_object_or_404(User, id=user_id)
    user.is_active = True
    user.save()
    return redirect('user_list')

class UserListView(ListView):
    model = User
    template_name = 'user_list.html'
    context_object_name = 'users'
    paginate_by = 10

    def get_queryset(self):
        queryset = super().get_queryset()
        query = self.request.GET.get('q')
        role = self.request.GET.get('role')
        if query:
            queryset = queryset.filter(
                Q(username__icontains=query) |
                Q(first_name__icontains=query) |
                Q(last_name__icontains=query)
            )
        if role:
            queryset = queryset.filter(role__role_name=role)
        return queryset.order_by('role__role_name')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['roles'] = Role.objects.all()  # Загружаем роли из модели Role
        return context


@require_POST
def change_user_role(request):
    user_id = request.POST.get('user_id')
    new_role_id = request.POST.get('role')

    if not user_id or not new_role_id:
        return redirect('user_list')

    user = get_object_or_404(User, id=user_id)
    new_role = get_object_or_404(Role, id=new_role_id)

    user.role = new_role

    user.save()

    with open('logs.log', 'a') as f:
        f.write(f"{datetime.now()} - {request.method} {request.path} Пользователь - {user.username} роль изменена на {user.role}\n")

    return redirect('user_list')

def system_settings(request):
    context = {}
    return render(request, 'system_settings_page.html', context = context)

def generate_username():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=8))

def generate_password():
    return ''.join(random.choices(string.ascii_letters + string.digits + string.punctuation, k=12))

def create_user_view(request):
    if request.method == 'POST':
        username = generate_username()
        password = generate_password()
        first_name = request.POST.get('first_name')
        last_name = request.POST.get('last_name')
        email = request.POST.get('email')  # Получаем email
        role_id = request.POST.get('role')

        role = get_object_or_404(Role, id=role_id)
        user = User(username=username, first_name=first_name, last_name=last_name, email=email, role=role)  # Добавляем email
        user.password = make_password(password)  # Хешируем пароль
        user.save()

        return render(request, 'user_created.html', {  # Возвращаем новый шаблон
            'username': username,
            'password': password,
            'email': email
        })

    # def save(self, commit=True):
    #     user = super().save(commit=False)
    #     user.set_password(self.cleaned_data['password1'])
    #     if commit:
    #         user.save()
    #     email = EmailMessage(
    #         '',
    #         f'http://localhost:8000/verify/{user.id}',
    #         settings.EMAIL_HOST_USER,
    #         [self.cleaned_data['email']],
    #         headers={'Message-ID': 'foo'},
    #     )
    #     email.send()
    #     return user
    roles = Role.objects.all()
    return render(request, 'create_user.html', {'roles': roles})

def create_backup(request):
    os.system(f'python manage.py dumpdata > {settings.BASE_DIR}/backup.json')
    with open(f'{settings.BASE_DIR}\\backup.json', 'r', encoding='windows-1254') as file:
        response = HttpResponse(file.read(), content_type='application/json')
        response['Content-Disposition'] = 'attachment; filename=backup.json'
        return response


def pg_backup(request):
    # os.system(f'python manage.py dumpdata > {settings.BASE_DIR}/backup.json')
    os.system(f'/Applications/pgAdmin\ 4.app/Contents/SharedSupport/pg_dump --file "{settings.BASE_DIR}/backups/backup-pg4-{datetime.now()}" --host "localhost" --port "5432" --username "postgres" --no-password --format=d --verbose "TestBase"')
    # with open(f'{settings.BASE_DIR}\\backup.json', 'r', encoding='windows-1254') as file:
    #     response = HttpResponse(file.read(), content_type='application/json')
    #     response['Content-Disposition'] = 'attachment; filename=backup.json'
    #     return response
    return HttpResponse("резервная копия создана")


def pg_recover(request):
    # os.system(f'python manage.py dumpdata > {settings.BASE_DIR}/backup.json')
    os.system(f'/Applications/pgAdmin 4.app/Contents/SharedSupport/pg_restore --host "localhost" --port "5432" --username "postgres" --no-password --dbname "TestBase" --format=d --verbose "/Users/alinakonuhova/PycharmProjects/KorShop/backups/"')
    # with open(f'{settings.BASE_DIR}\\backup.json', 'r', encoding='windows-1254') as file:
    #     response = HttpResponse(file.read(), content_type='application/json')
    #     response['Content-Disposition'] = 'attachment; filename=backup.json'
    #     return response
    return HttpResponse("восстанлено")

def ExportDataToExcel(request):
    objs = User.objects.all(), Role.objects.all(),
    pd.DataFrame(objs).to_excel('out2put.xlsx')
    return request
    # return JsonResponse({
    #     'status': 200
    # })

--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/KorShop/AdminPannel/middleware/logger_middleware.py ---
from django.utils.datetime_safe import datetime


class LogErrorsMiddleware(object):
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        try:
            response = self.get_response(request)
        except Exception as e:
            self.log_error(request, e)
            raise

        return response

    def log_error(self, request, exception):
        # Log the error to a file
        with open('logs.log', 'a') as f:
            f.write(f"{datetime.now()} - {request.method} {request.path} {exception}\n")
        print(f"{datetime.now()} - {request.method} {request.path} {exception}")




--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/Lessons /.venv/lib/python3.9/site-packages/lxml-5.3.0.dist-info/top_level.txt ---
lxml


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/Lessons /.venv/lib/python3.9/site-packages/lxml-5.3.0.dist-info/LICENSE.txt ---
Copyright (c) 2004 Infrae. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
   
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in
     the documentation and/or other materials provided with the
     distribution.

  3. Neither the name of Infrae nor the names of its contributors may
     be used to endorse or promote products derived from this software
     without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL INFRAE OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/Lessons /.venv/lib/python3.9/site-packages/lxml-5.3.0.dist-info/LICENSES.txt ---
lxml is copyright Infrae and distributed under the BSD license (see
doc/licenses/BSD.txt), with the following exceptions:

Some code, such a selftest.py, selftest2.py and
src/lxml/_elementpath.py are derived from ElementTree and
cElementTree. See doc/licenses/elementtree.txt for the license text.

lxml.cssselect and lxml.html are copyright Ian Bicking and distributed
under the BSD license (see doc/licenses/BSD.txt).

test.py, the test-runner script, is GPL and copyright Shuttleworth
Foundation. See doc/licenses/GPL.txt. It is believed the unchanged
inclusion of test.py to run the unit test suite falls under the
"aggregation" clause of the GPL and thus does not affect the license
of the rest of the package.

The isoschematron implementation uses several XSL and RelaxNG resources:
 * The (XML syntax) RelaxNG schema for schematron, copyright International
   Organization for Standardization (see 
   src/lxml/isoschematron/resources/rng/iso-schematron.rng for the license
   text)
 * The skeleton iso-schematron-xlt1 pure-xslt schematron implementation
   xsl stylesheets, copyright Rick Jelliffe and Academia Sinica Computing
   Center, Taiwan (see the xsl files here for the license text: 
   src/lxml/isoschematron/resources/xsl/iso-schematron-xslt1/)
 * The xsd/rng schema schematron extraction xsl transformations are unlicensed
   and copyright the respective authors as noted (see 
   src/lxml/isoschematron/resources/xsl/RNG2Schtrn.xsl and
   src/lxml/isoschematron/resources/xsl/XSD2Schtrn.xsl)


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/Lessons /.venv/lib/python3.9/site-packages/python_docx-1.1.2.dist-info/top_level.txt ---
docx


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/Lessons /.venv/lib/python3.9/site-packages/wheel/vendored/vendor.txt ---
packaging==23.0


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/Lessons /.venv/lib/python3.9/site-packages/pip/_vendor/vendor.txt ---
CacheControl==0.12.11  # Make sure to update the license in pyproject.toml for this.
colorama==0.4.6
distlib==0.3.6
distro==1.8.0
msgpack==1.0.5
packaging==21.3
platformdirs==3.8.1
pyparsing==3.1.0
pyproject-hooks==1.0.0
requests==2.31.0
    certifi==2023.5.7
    chardet==5.1.0
    idna==3.4
    urllib3==1.26.16
rich==13.4.2
    pygments==2.15.1
    typing_extensions==4.7.1
resolvelib==1.0.1
setuptools==68.0.0
six==1.16.0
tenacity==8.2.2
tomli==2.0.1
webencodings==0.5.1


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/Lessons /.venv/lib/python3.9/site-packages/pip-23.2.1.dist-info/entry_points.txt ---
[console_scripts]
pip = pip._internal.cli.main:main
pip3 = pip._internal.cli.main:main
pip3.11 = pip._internal.cli.main:main


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/Lessons /.venv/lib/python3.9/site-packages/pip-23.2.1.dist-info/top_level.txt ---
pip


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/Lessons /.venv/lib/python3.9/site-packages/pip-23.2.1.dist-info/LICENSE.txt ---
Copyright (c) 2008-present The pip developers (see AUTHORS.txt file)

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/Lessons /.venv/lib/python3.9/site-packages/pip-23.2.1.dist-info/AUTHORS.txt ---
@Switch01
A_Rog
Aakanksha Agrawal
Abhinav Sagar
ABHYUDAY PRATAP SINGH
abs51295
AceGentile
Adam Chainz
Adam Tse
Adam Wentz
admin
Adrien Morison
ahayrapetyan
Ahilya
AinsworthK
Akash Srivastava
Alan Yee
Albert Tugushev
Albert-Guan
albertg
Alberto Sottile
Aleks Bunin
Alethea Flowers
Alex Gaynor
Alex Grönholm
Alex Hedges
Alex Loosley
Alex Morega
Alex Stachowiak
Alexander Shtyrov
Alexandre Conrad
Alexey Popravka
Alli
Ami Fischman
Ananya Maiti
Anatoly Techtonik
Anders Kaseorg
Andre Aguiar
Andreas Lutro
Andrei Geacar
Andrew Gaul
Andrew Shymanel
Andrey Bienkowski
Andrey Bulgakov
Andrés Delfino
Andy Freeland
Andy Kluger
Ani Hayrapetyan
Aniruddha Basak
Anish Tambe
Anrs Hu
Anthony Sottile
Antoine Musso
Anton Ovchinnikov
Anton Patrushev
Antonio Alvarado Hernandez
Antony Lee
Antti Kaihola
Anubhav Patel
Anudit Nagar
Anuj Godase
AQNOUCH Mohammed
AraHaan
Arindam Choudhury
Armin Ronacher
Artem
Arun Babu Neelicattu
Ashley Manton
Ashwin Ramaswami
atse
Atsushi Odagiri
Avinash Karhana
Avner Cohen
Awit (Ah-Wit) Ghirmai
Baptiste Mispelon
Barney Gale
barneygale
Bartek Ogryczak
Bastian Venthur
Ben Bodenmiller
Ben Darnell
Ben Hoyt
Ben Mares
Ben Rosser
Bence Nagy
Benjamin Peterson
Benjamin VanEvery
Benoit Pierre
Berker Peksag
Bernard
Bernard Tyers
Bernardo B. Marques
Bernhard M. Wiedemann
Bertil Hatt
Bhavam Vidyarthi
Blazej Michalik
Bogdan Opanchuk
BorisZZZ
Brad Erickson
Bradley Ayers
Brandon L. Reiss
Brandt Bucher
Brett Randall
Brett Rosen
Brian Cristante
Brian Rosner
briantracy
BrownTruck
Bruno Oliveira
Bruno Renié
Bruno S
Bstrdsmkr
Buck Golemon
burrows
Bussonnier Matthias
bwoodsend
c22
Caleb Martinez
Calvin Smith
Carl Meyer
Carlos Liam
Carol Willing
Carter Thayer
Cass
Chandrasekhar Atina
Chih-Hsuan Yen
Chris Brinker
Chris Hunt
Chris Jerdonek
Chris Kuehl
Chris McDonough
Chris Pawley
Chris Pryer
Chris Wolfe
Christian Clauss
Christian Heimes
Christian Oudard
Christoph Reiter
Christopher Hunt
Christopher Snyder
cjc7373
Clark Boylan
Claudio Jolowicz
Clay McClure
Cody
Cody Soyland
Colin Watson
Collin Anderson
Connor Osborn
Cooper Lees
Cooper Ry Lees
Cory Benfield
Cory Wright
Craig Kerstiens
Cristian Sorinel
Cristina
Cristina Muñoz
Curtis Doty
cytolentino
Daan De Meyer
Damian
Damian Quiroga
Damian Shaw
Dan Black
Dan Savilonis
Dan Sully
Dane Hillard
daniel
Daniel Collins
Daniel Hahler
Daniel Holth
Daniel Jost
Daniel Katz
Daniel Shaulov
Daniele Esposti
Daniele Nicolodi
Daniele Procida
Daniil Konovalenko
Danny Hermes
Danny McClanahan
Darren Kavanagh
Dav Clark
Dave Abrahams
Dave Jones
David Aguilar
David Black
David Bordeynik
David Caro
David D Lowe
David Evans
David Hewitt
David Linke
David Poggi
David Pursehouse
David Runge
David Tucker
David Wales
Davidovich
Deepak Sharma
Deepyaman Datta
Denise Yu
derwolfe
Desetude
Devesh Kumar Singh
Diego Caraballo
Diego Ramirez
DiegoCaraballo
Dimitri Merejkowsky
Dimitri Papadopoulos
Dirk Stolle
Dmitry Gladkov
Dmitry Volodin
Domen Kožar
Dominic Davis-Foster
Donald Stufft
Dongweiming
doron zarhi
Dos Moonen
Douglas Thor
DrFeathers
Dustin Ingram
Dwayne Bailey
Ed Morley
Edgar Ramírez
Ee Durbin
Eitan Adler
ekristina
elainechan
Eli Schwartz
Elisha Hollander
Ellen Marie Dash
Emil Burzo
Emil Styrke
Emmanuel Arias
Endoh Takanao
enoch
Erdinc Mutlu
Eric Cousineau
Eric Gillingham
Eric Hanchrow
Eric Hopper
Erik M. Bray
Erik Rose
Erwin Janssen
Eugene Vereshchagin
everdimension
Federico
Felipe Peter
Felix Yan
fiber-space
Filip Kokosiński
Filipe Laíns
Finn Womack
finnagin
Florian Briand
Florian Rathgeber
Francesco
Francesco Montesano
Frost Ming
Gabriel Curio
Gabriel de Perthuis
Garry Polley
gavin
gdanielson
Geoffrey Sneddon
George Song
Georgi Valkov
Georgy Pchelkin
ghost
Giftlin Rajaiah
gizmoguy1
gkdoc
Godefroid Chapelle
Gopinath M
GOTO Hayato
gousaiyang
gpiks
Greg Roodt
Greg Ward
Guilherme Espada
Guillaume Seguin
gutsytechster
Guy Rozendorn
Guy Tuval
gzpan123
Hanjun Kim
Hari Charan
Harsh Vardhan
harupy
Harutaka Kawamura
hauntsaninja
Henrich Hartzer
Henry Schreiner
Herbert Pfennig
Holly Stotelmyer
Honnix
Hsiaoming Yang
Hugo Lopes Tavares
Hugo van Kemenade
Hugues Bruant
Hynek Schlawack
Ian Bicking
Ian Cordasco
Ian Lee
Ian Stapleton Cordasco
Ian Wienand
Igor Kuzmitshov
Igor Sobreira
Ilan Schnell
Illia Volochii
Ilya Baryshev
Inada Naoki
Ionel Cristian Mărieș
Ionel Maries Cristian
Ivan Pozdeev
Jacob Kim
Jacob Walls
Jaime Sanz
jakirkham
Jakub Kuczys
Jakub Stasiak
Jakub Vysoky
Jakub Wilk
James Cleveland
James Curtin
James Firth
James Gerity
James Polley
Jan Pokorný
Jannis Leidel
Jarek Potiuk
jarondl
Jason Curtis
Jason R. Coombs
JasonMo
JasonMo1
Jay Graves
Jean-Christophe Fillion-Robin
Jeff Barber
Jeff Dairiki
Jelmer Vernooĳ
jenix21
Jeremy Stanley
Jeremy Zafran
Jesse Rittner
Jiashuo Li
Jim Fisher
Jim Garrison
Jiun Bae
Jivan Amara
Joe Bylund
Joe Michelini
John Paton
John T. Wodder II
John-Scott Atlakson
johnthagen
Jon Banafato
Jon Dufresne
Jon Parise
Jonas Nockert
Jonathan Herbert
Joonatan Partanen
Joost Molenaar
Jorge Niedbalski
Joseph Bylund
Joseph Long
Josh Bronson
Josh Hansen
Josh Schneier
Juan Luis Cano Rodríguez
Juanjo Bazán
Judah Rand
Julian Berman
Julian Gethmann
Julien Demoor
Jussi Kukkonen
jwg4
Jyrki Pulliainen
Kai Chen
Kai Mueller
Kamal Bin Mustafa
kasium
kaustav haldar
keanemind
Keith Maxwell
Kelsey Hightower
Kenneth Belitzky
Kenneth Reitz
Kevin Burke
Kevin Carter
Kevin Frommelt
Kevin R Patterson
Kexuan Sun
Kit Randel
Klaas van Schelven
KOLANICH
kpinc
Krishna Oza
Kumar McMillan
Kyle Persohn
lakshmanaram
Laszlo Kiss-Kollar
Laurent Bristiel
Laurent LAPORTE
Laurie O
Laurie Opperman
layday
Leon Sasson
Lev Givon
Lincoln de Sousa
Lipis
lorddavidiii
Loren Carvalho
Lucas Cimon
Ludovic Gasc
Lukas Juhrich
Luke Macken
Luo Jiebin
luojiebin
luz.paz
László Kiss Kollár
M00nL1ght
Marc Abramowitz
Marc Tamlyn
Marcus Smith
Mariatta
Mark Kohler
Mark Williams
Markus Hametner
Martey Dodoo
Martin Fischer
Martin Häcker
Martin Pavlasek
Masaki
Masklinn
Matej Stuchlik
Mathew Jennings
Mathieu Bridon
Mathieu Kniewallner
Matt Bacchi
Matt Good
Matt Maker
Matt Robenolt
matthew
Matthew Einhorn
Matthew Feickert
Matthew Gilliard
Matthew Iversen
Matthew Treinish
Matthew Trumbell
Matthew Willson
Matthias Bussonnier
mattip
Maurits van Rees
Max W Chase
Maxim Kurnikov
Maxime Rouyrre
mayeut
mbaluna
mdebi
memoselyk
meowmeowcat
Michael
Michael Aquilina
Michael E. Karpeles
Michael Klich
Michael Mintz
Michael Williamson
michaelpacer
Michał Górny
Mickaël Schoentgen
Miguel Araujo Perez
Mihir Singh
Mike
Mike Hendricks
Min RK
MinRK
Miro Hrončok
Monica Baluna
montefra
Monty Taylor
Muha Ajjan‮
Nadav Wexler
Nahuel Ambrosini
Nate Coraor
Nate Prewitt
Nathan Houghton
Nathaniel J. Smith
Nehal J Wani
Neil Botelho
Nguyễn Gia Phong
Nicholas Serra
Nick Coghlan
Nick Stenning
Nick Timkovich
Nicolas Bock
Nicole Harris
Nikhil Benesch
Nikhil Ladha
Nikita Chepanov
Nikolay Korolev
Nipunn Koorapati
Nitesh Sharma
Niyas Sait
Noah
Noah Gorny
Nowell Strite
NtaleGrey
nvdv
OBITORASU
Ofek Lev
ofrinevo
Oliver Freund
Oliver Jeeves
Oliver Mannion
Oliver Tonnhofer
Olivier Girardot
Olivier Grisel
Ollie Rutherfurd
OMOTO Kenji
Omry Yadan
onlinejudge95
Oren Held
Oscar Benjamin
Oz N Tiram
Pachwenko
Patrick Dubroy
Patrick Jenkins
Patrick Lawson
patricktokeeffe
Patrik Kopkan
Paul Kehrer
Paul Moore
Paul Nasrat
Paul Oswald
Paul van der Linden
Paulus Schoutsen
Pavel Safronov
Pavithra Eswaramoorthy
Pawel Jasinski
Paweł Szramowski
Pekka Klärck
Peter Gessler
Peter Lisák
Peter Waller
petr-tik
Phaneendra Chiruvella
Phil Elson
Phil Freo
Phil Pennock
Phil Whelan
Philip Jägenstedt
Philip Molloy
Philippe Ombredanne
Pi Delport
Pierre-Yves Rofes
Pieter Degroote
pip
Prabakaran Kumaresshan
Prabhjyotsing Surjit Singh Sodhi
Prabhu Marappan
Pradyun Gedam
Prashant Sharma
Pratik Mallya
pre-commit-ci[bot]
Preet Thakkar
Preston Holmes
Przemek Wrzos
Pulkit Goyal
q0w
Qiangning Hong
Quentin Lee
Quentin Pradet
R. David Murray
Rafael Caricio
Ralf Schmitt
Razzi Abuissa
rdb
Reece Dunham
Remi Rampin
Rene Dudfield
Riccardo Magliocchetti
Riccardo Schirone
Richard Jones
Richard Si
Ricky Ng-Adam
Rishi
RobberPhex
Robert Collins
Robert McGibbon
Robert Pollak
Robert T. McGibbon
robin elisha robinson
Roey Berman
Rohan Jain
Roman Bogorodskiy
Roman Donchenko
Romuald Brunet
ronaudinho
Ronny Pfannschmidt
Rory McCann
Ross Brattain
Roy Wellington Ⅳ
Ruairidh MacLeod
Russell Keith-Magee
Ryan Shepherd
Ryan Wooden
ryneeverett
Sachi King
Salvatore Rinchiera
sandeepkiran-js
Savio Jomton
schlamar
Scott Kitterman
Sean
seanj
Sebastian Jordan
Sebastian Schaetz
Segev Finer
SeongSoo Cho
Sergey Vasilyev
Seth Michael Larson
Seth Woodworth
Shantanu
shireenrao
Shivansh-007
Shlomi Fish
Shovan Maity
Simeon Visser
Simon Cross
Simon Pichugin
sinoroc
sinscary
snook92
socketubs
Sorin Sbarnea
Srinivas Nyayapati
Stavros Korokithakis
Stefan Scherfke
Stefano Rivera
Stephan Erb
Stephen Rosen
stepshal
Steve (Gadget) Barnes
Steve Barnes
Steve Dower
Steve Kowalik
Steven Myint
Steven Silvester
stonebig
Stéphane Bidoul
Stéphane Bidoul (ACSONE)
Stéphane Klein
Sumana Harihareswara
Surbhi Sharma
Sviatoslav Sydorenko
Swat009
Sylvain
Takayuki SHIMIZUKAWA
Taneli Hukkinen
tbeswick
Thiago
Thijs Triemstra
Thomas Fenzl
Thomas Grainger
Thomas Guettler
Thomas Johansson
Thomas Kluyver
Thomas Smith
Thomas VINCENT
Tim D. Smith
Tim Gates
Tim Harder
Tim Heap
tim smith
tinruufu
Tobias Hermann
Tom Forbes
Tom Freudenheim
Tom V
Tomas Hrnciar
Tomas Orsava
Tomer Chachamu
Tommi Enenkel | AnB
Tomáš Hrnčiar
Tony Beswick
Tony Narlock
Tony Zhaocheng Tan
TonyBeswick
toonarmycaptain
Toshio Kuratomi
toxinu
Travis Swicegood
Tushar Sadhwani
Tzu-ping Chung
Valentin Haenel
Victor Stinner
victorvpaulo
Vikram - Google
Viktor Szépe
Ville Skyttä
Vinay Sajip
Vincent Philippon
Vinicyus Macedo
Vipul Kumar
Vitaly Babiy
Vladimir Rutsky
W. Trevor King
Wil Tan
Wilfred Hughes
William Edwards
William ML Leslie
William T Olson
William Woodruff
Wilson Mo
wim glenn
Winson Luk
Wolfgang Maier
Wu Zhenyu
XAMES3
Xavier Fernandez
xoviat
xtreak
YAMAMOTO Takashi
Yen Chi Hsuan
Yeray Diaz Diaz
Yoval P
Yu Jian
Yuan Jing Vincent Yan
Yusuke Hayashi
Zearin
Zhiping Deng
ziebam
Zvezdan Petkovic
Łukasz Langa
Роман Донченко
Семён Марьясин
‮rekcäH nitraM‮


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/Lessons /.venv/lib/python3.9/site-packages/setuptools-68.2.0.dist-info/entry_points.txt ---
[distutils.commands]
alias = setuptools.command.alias:alias
bdist_egg = setuptools.command.bdist_egg:bdist_egg
bdist_rpm = setuptools.command.bdist_rpm:bdist_rpm
build = setuptools.command.build:build
build_clib = setuptools.command.build_clib:build_clib
build_ext = setuptools.command.build_ext:build_ext
build_py = setuptools.command.build_py:build_py
develop = setuptools.command.develop:develop
dist_info = setuptools.command.dist_info:dist_info
easy_install = setuptools.command.easy_install:easy_install
editable_wheel = setuptools.command.editable_wheel:editable_wheel
egg_info = setuptools.command.egg_info:egg_info
install = setuptools.command.install:install
install_egg_info = setuptools.command.install_egg_info:install_egg_info
install_lib = setuptools.command.install_lib:install_lib
install_scripts = setuptools.command.install_scripts:install_scripts
rotate = setuptools.command.rotate:rotate
saveopts = setuptools.command.saveopts:saveopts
sdist = setuptools.command.sdist:sdist
setopt = setuptools.command.setopt:setopt
test = setuptools.command.test:test
upload_docs = setuptools.command.upload_docs:upload_docs

[distutils.setup_keywords]
dependency_links = setuptools.dist:assert_string_list
eager_resources = setuptools.dist:assert_string_list
entry_points = setuptools.dist:check_entry_points
exclude_package_data = setuptools.dist:check_package_data
extras_require = setuptools.dist:check_extras
include_package_data = setuptools.dist:assert_bool
install_requires = setuptools.dist:check_requirements
namespace_packages = setuptools.dist:check_nsp
package_data = setuptools.dist:check_package_data
packages = setuptools.dist:check_packages
python_requires = setuptools.dist:check_specifier
setup_requires = setuptools.dist:check_requirements
test_loader = setuptools.dist:check_importable
test_runner = setuptools.dist:check_importable
test_suite = setuptools.dist:check_test_suite
tests_require = setuptools.dist:check_requirements
use_2to3 = setuptools.dist:invalid_unless_false
zip_safe = setuptools.dist:assert_bool

[egg_info.writers]
PKG-INFO = setuptools.command.egg_info:write_pkg_info
dependency_links.txt = setuptools.command.egg_info:overwrite_arg
eager_resources.txt = setuptools.command.egg_info:overwrite_arg
entry_points.txt = setuptools.command.egg_info:write_entries
namespace_packages.txt = setuptools.command.egg_info:overwrite_arg
requires.txt = setuptools.command.egg_info:write_requirements
top_level.txt = setuptools.command.egg_info:write_toplevel_names

[setuptools.finalize_distribution_options]
keywords = setuptools.dist:Distribution._finalize_setup_keywords
parent_finalize = setuptools.dist:_Distribution.finalize_options


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/Lessons /.venv/lib/python3.9/site-packages/setuptools-68.2.0.dist-info/top_level.txt ---
_distutils_hack
pkg_resources
setuptools


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/Lessons /.venv/lib/python3.9/site-packages/lxml/isoschematron/resources/xsl/iso-schematron-xslt1/readme.txt ---
ISO SCHEMATRON 2010

XSLT implementation by Rick Jelliffe with assistance from members of Schematron-love-in maillist.

2010-04-21

Two distributions are available. One is for XSLT1 engines. 
The other is for XSLT2 engines, such as SAXON 9.


This version of Schematron splits the process into a pipeline of several different XSLT stages.

1) First, preprocess your Schematron schema with iso_dsdl_include.xsl.  
This is a macro processor to assemble the schema from various parts. 
If your schema is not in separate parts, you can skip this stage.
This stage also generates error messages for some common XPath syntax problems.

2) Second, preprocess the output from stage 1 with iso_abstract_expand.xsl.  
This is a macro processor to convert abstract patterns to real patterns. 
If your schema does not use abstract patterns, you can skip this
stage.

3) Third, compile the Schematron schema into an XSLT script. 
This will typically use iso_svrl_for_xslt1.xsl or iso_svrl_for_xslt2.xsl 
(which in turn invoke iso_schematron_skeleton_for_xslt1.xsl or iso_schematron_skeleton_for_saxon.xsl)
However, other "meta-stylesheets" are also in common use; the principle of operation is the same.
If your schema uses Schematron phases, supply these as command line/invocation parameters
to this process.

4) Fourth, run the script generated by stage 3 against the document being validated.
If you are using the SVRL script, then the output of validation will be an XML document.
If your schema uses Schematron parameters, supply these as command line/invocation parameters
to this process. 


The XSLT2 distribution also features several next generation features, 
such as validating multiple documents. See the source code for details.

Schematron assertions can be written in any language, of course; the file
sch-messages-en.xhtml contains the diagnostics messages from the XSLT2 skeleton
in English, and this can be used as template to localize the skeleton's
error messages. Note that typically programming errors in Schematron are XPath
errors, which requires localized messages from the XSLT engine.

ANT
---
To give an example of how to process a document, here is a sample ANT task.

<target  name="schematron-compile-test" >

	   <!-- expand inclusions -->
	   <xslt basedir="test/schematron"
	   		style="iso_dsdl_include.xsl" in="test.sch"  out="test1.sch"> 
	   				<classpath>
	   					<pathelement location="${lib.dir}/saxon9.jar"/>
	   				</classpath>
	   </xslt>

	   <!-- expand abstract patterns -->
	   <xslt basedir="test/schematron"
	   		style="iso_abstract_expand.xsl" in="test1.sch"  out="test2.sch"> 
	   				<classpath>
	   					<pathelement location="${lib.dir}/saxon9.jar"/>
	   				</classpath>
	   </xslt>



	   <!-- compile it -->
	   <xslt basedir="test/schematron"
	   		style="iso_svrl_for_xslt2.xsl" in="test2.sch"  out="test.xsl"> 
	   				<classpath>
	   					<pathelement location="${lib.dir}/saxon9.jar"/>
	   				</classpath>
	   </xslt>
	   
	   <!-- validate -->
	   <xslt basedir="test/schematron"
		   		style="test.xsl" in="instance.xml"  out="instance.svrlt"> 
		   				<classpath>
		   					<pathelement location="${lib.dir}/saxon9.jar"/>
		   				</classpath>
	</xslt>
		</target>


--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/Lessons /.venv/lib/python3.9/site-packages/wheel-0.41.2.dist-info/entry_points.txt ---
[console_scripts]
wheel=wheel.cli:main

[distutils.commands]
bdist_wheel=wheel.bdist_wheel:bdist_wheel



--- Содержимое файла: /Users/alinakonuhova/PycharmProjects/Lessons /.venv/lib/python3.9/site-packages/wheel-0.41.2.dist-info/LICENSE.txt ---
MIT License

Copyright (c) 2012 Daniel Holth <dholth@fastmail.fm> and contributors

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.


